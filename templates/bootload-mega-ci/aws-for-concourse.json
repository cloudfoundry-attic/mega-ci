{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Infrastructure for BOSH, Concourse and CF deployment",

  "Parameters": {
    "KeyName": {
      "Description": "SSH Keypair to use for instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "bosh"
    },

    "ConcourseHostedZoneName": {
      "Description": "(Optional) Route53 Hosted Zone in which to register the Concourse ELB's DNS record.",
      "Type": "String",
      "Default": ""
    },
    "CFHostedZoneName": {
      "Description": "Route53 Hosted Zone in which to register the CF ELB's DNS record.",
      "Type": "String",
      "Default": ""
    },

    "ConsulCFHostedZoneName": {
      "Description": "Route53 Hosted Zone in which to register the Consul CF ELB's DNS record.",
      "Type": "String",
      "Default": ""
    },

    "ConsulDiegoCFHostedZoneName": {
      "Description": "Route53 Hosted Zone in which to register the Consul Diego CF ELB's DNS record.",
      "Type": "String",
      "Default": ""
    },

    "ELBRecordSetName": {
      "Description": "(Optional) Route53 Record Set name for the ELB.",
      "Type": "String",
      "Default": ""
    },

    "BOSHInboundCIDR": {
      "Description": "CIDR to permit access to BOSH (e.g. 205.103.216.37/32 for your specific IP)",
      "Type": "String",
      "Default": "0.0.0.0/0"
    },

    "VPCCIDR": {
      "Description": "CIDR block for the VPC.",
      "Type": "String",
      "Default": "10.0.0.0/16"
    },
    "BOSHSubnetCIDR": {
      "Description": "CIDR block for the BOSH subnet.",
      "Type": "String",
      "Default": "10.0.0.0/24"
    },
    "LoadBalancerSubnetCIDR": {
      "Description": "CIDR block for the BOSH subnet.",
      "Type": "String",
      "Default": "10.0.2.0/24"
    },
    "ConcourseSubnetCIDR": {
      "Description": "CIDR block for the Concourse subnet.",
      "Type": "String",
      "Default": "10.0.17.0/24"
    },
    "EtcdSubnetCIDR": {
      "Description": "CIDR block for the Etcd subnet.",
      "Type": "String",
      "Default": "10.0.16.0/24"
    },
    "EtcdAZ1SubnetCIDR": {
      "Description": "CIDR block for the Etcd AZ1 subnet.",
      "Type": "String",
      "Default": "10.0.22.0/24"
    },
    "EtcdAZ2SubnetCIDR": {
      "Description": "CIDR block for the Etcd AZ2 subnet.",
      "Type": "String",
      "Default": "10.0.23.0/24"
    },
    "EtcdSSLAZ1SubnetCIDR": {
      "Description": "CIDR block for the Etcd SSL AZ1 subnet.",
      "Type": "String",
      "Default": "10.0.24.0/24"
    },
    "EtcdSSLAZ2SubnetCIDR": {
      "Description": "CIDR block for the Etcd SSL AZ2 subnet.",
      "Type": "String",
      "Default": "10.0.25.0/24"
    },
    "ConsulSubnetCIDR": {
      "Description": "CIDR block for the Consul subnet.",
      "Type": "String",
      "Default": "10.0.4.0/24"
    },
    "ConsulAZ1SubnetCIDR": {
      "Description": "CIDR block for the Consul AZ1 subnet.",
      "Type": "String",
      "Default": "10.0.20.0/24"
    },
    "ConsulAZ2SubnetCIDR": {
      "Description": "CIDR block for the Consul AZ2 subnet.",
      "Type": "String",
      "Default": "10.0.21.0/24"
    },
    "CFSubnetCIDR": {
      "Description": "CIDR block for the CF Deployment subnet.",
      "Type": "String",
      "Default": "10.0.15.0/24"
    },
    "ConsulCFSubnetCIDR": {
      "Description": "CIDR block for the CF Deployment subnet.",
      "Type": "String",
      "Default": "10.0.50.0/24"
    },
    "ConsulDiegoCFSubnetCIDR": {
      "Description": "CIDR block for the Consul with Diego CF Deployment subnet.",
      "Type": "String",
      "Default": "10.0.51.0/24"
    },
    "ConcourseLoadBalancerCertName": {
      "Description": "Name of the SSL cert to use for the concourse ELB.",
      "Type": "String",
      "Default": "concourse"
    },
    "CFLoadBalancerCertName": {
      "Description": "Name of the SSL cert to use for the CF ELB.",
      "Type": "String",
      "Default": ""
    },
    "ConsulCFLoadBalancerCertName": {
      "Description": "Name of the SSL cert to use for the Consul CF ELB.",
      "Type": "String",
      "Default": ""
    },
    "ConsulDiegoCFLoadBalancerCertName": {
      "Description": "Name of the SSL cert to use for the Consul CF ELB.",
      "Type": "String",
      "Default": ""
    }
  },

  "Mappings": {
    "AWSNATAMI" : {
      "us-east-1":      { "AMI": "ami-ad227cc4" },
      "us-west-1":      { "AMI": "ami-d69aad93" },
      "us-west-2":      { "AMI": "ami-f032acc0" },
      "eu-west-1":      { "AMI": "ami-f3e30084" },
      "ap-southeast-1": { "AMI": "ami-f22772a0" },
      "ap-southeast-2": { "AMI": "ami-3bae3201" },
      "ap-northeast-1": { "AMI": "ami-cd43d9cc" },
      "sa-east-1":      { "AMI": "ami-d78325ca" }
    }
  },

  "Conditions": {
    "CreateRecordSet": {
      "Fn::And": [
        {
          "Fn::Not": [
            { "Fn::Equals": [{ "Ref": "ConcourseHostedZoneName" }, ""] }
          ]
        },
        {
          "Fn::Not": [
            { "Fn::Equals": [{ "Ref": "ELBRecordSetName" }, ""] }
          ]
        }
      ]
    },
    "CreateCFHostedZone": {
      "Fn::Not": [
        { "Fn::Equals": [{ "Ref": "CFHostedZoneName" }, ""] }
      ]
    },
    "CreateCFLoadBalancer": {
      "Fn::Not": [
        { "Fn::Equals": [{ "Ref": "CFLoadBalancerCertName" }, ""] }
      ]
    },
    "CreateConsulCFHostedZone": {
      "Fn::Not": [
        { "Fn::Equals": [{ "Ref": "ConsulCFHostedZoneName" }, ""] }
      ]
    },
    "CreateConsulDiegoCFHostedZone": {
      "Fn::Not": [
        { "Fn::Equals": [{ "Ref": "ConsulDiegoCFHostedZoneName" }, ""] }
      ]
    },
    "CreateConsulCFLoadBalancer": {
      "Fn::Not": [
        { "Fn::Equals": [{ "Ref": "ConsulCFLoadBalancerCertName" }, ""] }
      ]
    },
    "CreateConsulDiegoCFLoadBalancer": {
      "Fn::Not": [
        { "Fn::Equals": [{ "Ref": "ConsulDiegoCFLoadBalancerCertName" }, ""] }
      ]
    }
  },

  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": { "CidrBlock": { "Ref": "VPCCIDR" } }
    },

    "VPCGatewayInternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },

    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "VPCGatewayInternetGateway" }
      }
    },

    "BOSHSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "BOSH",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": { "Ref": "BOSHInboundCIDR" },
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22"
          },
          {
            "CidrIp": { "Ref": "BOSHInboundCIDR" },
            "IpProtocol": "tcp",
            "FromPort": "6868",
            "ToPort": "6868"
          },
          {
            "CidrIp": { "Ref": "BOSHInboundCIDR" },
            "IpProtocol": "tcp",
            "FromPort": "25555",
            "ToPort": "25555"
          },
          {
            "CidrIp": { "Ref": "VPCCIDR" },
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "ConcourseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Concourse",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          }
        ]
      }
    },

    "EtcdSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Etcd",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.16.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.16.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "EtcdAZ1SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "EtcdAZ1",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.22.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.22.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "EtcdAZ2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "EtcdAZ2",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.23.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.23.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "EtcdSSLAZ1SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "EtcdSSLAZ1",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.24.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.24.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "EtcdSSLAZ2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "EtcdSSLAZ2",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.25.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.25.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "ConsulSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Consul",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.4.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.4.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "ConsulAZ1SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "ConsulAZ1",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.20.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.20.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "ConsulAZ2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "ConsulAZ2",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.21.0/24",
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.0.21.0/24",
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535"
          },
          {
            "SourceSecurityGroupId": { "Ref": "ConcourseSecurityGroup" },
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Web",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "2222",
            "ToPort": "2222"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "4443",
            "ToPort": "4443"
          }
        ]
      }
    },

    "CFSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "CF Public Security Group",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.0.0/16",
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "NAT",
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "CidrIp": { "Ref": "VPCCIDR" },
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65535"
          }
        ]
      }
    },

    "BOSHSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": { "Ref": "BOSHSubnetCIDR" },
        "Tags": [{ "Key": "Name", "Value": "BOSH" }]
      }
    },

    "BOSHRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },

    "BOSHRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayInternetGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "VPCGatewayInternetGateway" },
        "RouteTableId": { "Ref": "BOSHRouteTable" }
      }
    },

    "BOSHSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "BOSHRouteTable" },
        "SubnetId": { "Ref": "BOSHSubnet" }
      }
    },

    "NATInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "m3.medium",
        "SubnetId": { "Ref": "BOSHSubnet" },
        "ImageId" : {
          "Fn::FindInMap": ["AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI"]
        },
        "KeyName": { "Ref" : "KeyName" },
        "SecurityGroupIds": [{ "Ref": "NATSecurityGroup" }],
        "SourceDestCheck": false,
        "Tags": [{ "Key": "Name", "Value": "NAT" }]
      }
    },

    "NATEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": { "Ref": "NATInstance" }
      }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "NATInstance",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "InstanceId": { "Ref": "NATInstance" }
      }
    },

    "ConcourseSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "ConcourseSubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "Concourse" }]
      }
    },

    "ConcourseSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "ConcourseSubnet" }
      }
    },

    "EtcdSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "EtcdSubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "Etcd" }]
      }
    },

    "EtcdAZ1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "EtcdAZ1SubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "EtcdAZ1" }]
      }
    },

    "EtcdAZ2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "EtcdAZ2SubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "EtcdAZ2" }]
      }
    },

    "EtcdSSLAZ1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "EtcdSSLAZ1SubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "EtcdSSLAZ1" }]
      }
    },

    "EtcdSSLAZ2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "EtcdSSLAZ2SubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "EtcdSSLAZ2" }]
      }
    },

    "EtcdSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "EtcdSubnet" }
      }
    },

    "EtcdAZ1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "EtcdAZ1Subnet" }
      }
    },

    "EtcdAZ2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "EtcdAZ2Subnet" }
      }
    },

    "EtcdSSLAZ1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "EtcdSSLAZ1Subnet" }
      }
    },

    "EtcdSSLAZ2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "EtcdSSLAZ2Subnet" }
      }
    },

    "ConsulSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "ConsulSubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "Consul" }]
      }
    },

    "ConsulAZ1Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "ConsulAZ1SubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "ConsulAZ1" }]
      }
    },

    "ConsulAZ2Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "ConsulAZ2SubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "ConsulAZ2" }]
      }
    },

    "ConsulSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "ConsulSubnet" }
      }
    },

    "ConsulAZ1SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "ConsulAZ1Subnet" }
      }
    },

    "ConsulAZ2SubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "ConsulAZ2Subnet" }
      }
    },

    "CFSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "CFSubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "cf1" }]
      }
    },

    "CFSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "CFSubnet" }
      }
    },

    "ConsulCFSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "ConsulCFSubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "consul-cf1" }]
      }
    },

    "ConsulCFSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "ConsulCFSubnet" }
      }
    },

    "ConsulDiegoCFSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "ConsulDiegoCFSubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "consul-diego-cf1" }]
      }
    },

    "ConsulDiegoCFSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "SubnetId": { "Ref": "ConsulDiegoCFSubnet" }
      }
    },

    "LoadBalancerSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": { "Ref" : "AWS::Region" } }] },
        "CidrBlock": { "Ref": "LoadBalancerSubnetCIDR" },
        "VpcId": { "Ref": "VPC" },
        "Tags": [{ "Key": "Name", "Value": "LoadBalancer" }]
      }
    },

    "LoadBalancerRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": { "VpcId": { "Ref": "VPC" } }
    },

    "LoadBalancerRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayInternetGateway",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "VPCGatewayInternetGateway" },
        "RouteTableId": { "Ref": "LoadBalancerRouteTable" }
      }
    },

    "LoadBalancerSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "LoadBalancerRouteTable" },
        "SubnetId": { "Ref": "LoadBalancerSubnet" }
      }
    },

    "ConcourseLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",

      "Properties": {
        "Subnets": [{ "Ref": "LoadBalancerSubnet" }],
        "SecurityGroups": [{ "Ref": "LoadBalancerSecurityGroup" }],

        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "tcp:8080",
          "Timeout": "5",
          "UnhealthyThreshold": "10"
        },

        "Listeners": [
          {
            "Protocol": "tcp",
            "LoadBalancerPort": "2222",
            "InstanceProtocol": "tcp",
            "InstancePort": "2222"
          },
          {
            "Protocol" : "ssl",
            "LoadBalancerPort" : "443",
            "InstanceProtocol": "tcp",
            "InstancePort" : "8080",
            "SSLCertificateId" : {
              "Fn::Join":[
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref":"AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref":"ConcourseLoadBalancerCertName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "ConcourseELBRecordSet": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Condition": "CreateRecordSet",
      "Properties": {
        "HostedZoneName": { "Ref": "ConcourseHostedZoneName" },
        "RecordSets": [
          {
            "Name": { "Ref": "ELBRecordSetName" },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "ConcourseLoadBalancer",
                  "CanonicalHostedZoneNameID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "ConcourseLoadBalancer",
                  "CanonicalHostedZoneName"
                ]
              }
            }
          }
        ]
      }
    },

    "CFLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "CreateCFLoadBalancer",

      "Properties": {
        "Subnets": [{ "Ref": "LoadBalancerSubnet" }],
        "SecurityGroups": [{ "Ref": "LoadBalancerSecurityGroup" }],

        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "tcp:80",
          "Timeout": "5",
          "UnhealthyThreshold": "10"
        },

        "Listeners": [
          {
            "Protocol": "http",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "http",
            "InstancePort": "80"
          },
          {
            "Protocol": "https",
            "LoadBalancerPort": "443",
            "InstanceProtocol": "http",
            "InstancePort": "80",
            "SSLCertificateId" : {
              "Fn::Join":[
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref":"AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref":"CFLoadBalancerCertName"
                  }
                ]
              ]
            }
          },
          {
            "Protocol" : "ssl",
            "LoadBalancerPort" : "4443",
            "InstanceProtocol": "tcp",
            "InstancePort" : "80",
            "SSLCertificateId" : {
              "Fn::Join":[
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref":"AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref":"CFLoadBalancerCertName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "CFHostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Condition": "CreateCFHostedZone",
      "Properties": {
        "Name": { "Ref": "CFHostedZoneName" }
      }
    },

    "CFEIPRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "CreateCFHostedZone",
      "Properties": {
        "HostedZoneId": { "Ref": "CFHostedZone" },
        "Name": { "Fn::Join" : [ "", [ "*.", {"Ref" : "CFHostedZoneName"} ,"."]] },
        "Type": "CNAME",
        "TTL": "300",
        "ResourceRecords" : [
          { "Fn::GetAtt": ["CFLoadBalancer","CanonicalHostedZoneName"] }
        ]
      }
    },

    "ConsulCFLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "CreateConsulCFLoadBalancer",

      "Properties": {
        "Subnets": [{ "Ref": "LoadBalancerSubnet" }],
        "SecurityGroups": [{ "Ref": "LoadBalancerSecurityGroup" }],

        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "tcp:80",
          "Timeout": "5",
          "UnhealthyThreshold": "10"
        },

        "Listeners": [
          {
            "Protocol": "http",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "http",
            "InstancePort": "80"
          },
          {
            "Protocol": "https",
            "LoadBalancerPort": "443",
            "InstanceProtocol": "http",
            "InstancePort": "80",
            "SSLCertificateId" : {
              "Fn::Join":[
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref":"AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref":"ConsulCFLoadBalancerCertName"
                  }
                ]
              ]
            }
          },
          {
            "Protocol" : "ssl",
            "LoadBalancerPort" : "4443",
            "InstanceProtocol": "tcp",
            "InstancePort" : "80",
            "SSLCertificateId" : {
              "Fn::Join":[
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref":"AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref":"ConsulCFLoadBalancerCertName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "ConsulDiegoCFLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition": "CreateConsulDiegoCFLoadBalancer",

      "Properties": {
        "Subnets": [{ "Ref": "LoadBalancerSubnet" }],
        "SecurityGroups": [{ "Ref": "LoadBalancerSecurityGroup" }],

        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "tcp:80",
          "Timeout": "5",
          "UnhealthyThreshold": "10"
        },

        "Listeners": [
          {
            "Protocol": "http",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "http",
            "InstancePort": "80"
          },
          {
            "Protocol": "https",
            "LoadBalancerPort": "443",
            "InstanceProtocol": "http",
            "InstancePort": "80",
            "SSLCertificateId" : {
              "Fn::Join":[
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref":"AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref":"ConsulDiegoCFLoadBalancerCertName"
                  }
                ]
              ]
            }
          },
          {
            "Protocol" : "ssl",
            "LoadBalancerPort" : "4443",
            "InstanceProtocol": "tcp",
            "InstancePort" : "80",
            "SSLCertificateId" : {
              "Fn::Join":[
                "",
                [
                  "arn:aws:iam::",
                  {
                    "Ref":"AWS::AccountId"
                  },
                  ":server-certificate/",
                  {
                    "Ref":"ConsulDiegoCFLoadBalancerCertName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },

    "ConsulCFHostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Condition": "CreateConsulCFHostedZone",
      "Properties": {
        "Name": { "Ref": "ConsulCFHostedZoneName" }
      }
    },

    "ConsulDiegoCFHostedZone": {
      "Type": "AWS::Route53::HostedZone",
      "Condition": "CreateConsulDiegoCFHostedZone",
      "Properties": {
        "Name": { "Ref": "ConsulDiegoCFHostedZoneName" }
      }
    },

    "ConsulCFEIPRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "CreateConsulCFHostedZone",
      "Properties": {
        "HostedZoneId": { "Ref": "ConsulCFHostedZone" },
        "Name": { "Fn::Join" : [ "", [ "*.", {"Ref" : "ConsulCFHostedZoneName"} ,"."]] },
        "Type": "CNAME",
        "TTL": "300",
        "ResourceRecords" : [
          { "Fn::GetAtt": ["ConsulCFLoadBalancer","CanonicalHostedZoneName"] }
        ]
      }
    },

    "ConsulDiegoCFEIPRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "CreateConsulDiegoCFHostedZone",
      "Properties": {
        "HostedZoneId": { "Ref": "ConsulDiegoCFHostedZone" },
        "Name": { "Fn::Join" : [ "", [ "*.", {"Ref" : "ConsulDiegoCFHostedZoneName"} ,"."]] },
        "Type": "CNAME",
        "TTL": "300",
        "ResourceRecords" : [
          { "Fn::GetAtt": ["ConsulDiegoCFLoadBalancer","CanonicalHostedZoneName"] }
        ]
      }
    },

    "MicroEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": { "Domain": "vpc" }
    }
  } 
}
