---
meta:
  environment: (( merge ))

cf_databases: (( merge ))
cf_resources: (( merge ))
cloud_formation_inputs: (( merge ))

director_uuid: (( merge ))

networks:
  - name: cf1
    type: manual
    subnets:
      - range: 10.0.15.0/24
        name: default_unused
        reserved:
          - 10.0.15.2 - 10.0.15.9
        static:
          - 10.0.15.10 - 10.0.15.100
        gateway: 10.0.15.1
        dns:
          - 10.0.0.2
        cloud_properties:
          security_groups: [(( cf_resources.security_group_name ))]
          subnet: (( cf_resources.subnets.[0].subnet_id ))

  - name: cf2
    type: manual
    subnets:
      - range: 10.0.16.0/24
        name: default_unused
        reserved:
          - 10.0.16.2 - 10.0.16.9
        static:
          - 10.0.16.10 - 10.0.16.100
        gateway: 10.0.16.1
        dns:
          - 10.0.0.2
        cloud_properties:
          security_groups: [(( cf_resources.security_group_name ))]
          subnet: (( cf_resources.subnets.[1].subnet_id ))
resource_pools:
  - name: router_z1
    cloud_properties:
      elbs: [(( cf_resources.elb ))]
  - name: router_z2
    cloud_properties:
      elbs: [(( cf_resources.elb ))]

properties:
  domain: (( cloud_formation_inputs.CFHostedZoneName ))
  ssl:
    skip_cert_verify: (( merge || false )) # REPLACE_WITH true if your ELB is using a self signed cert
  system_domain_organization: system
  app_domains: [(( cloud_formation_inputs.CFAppsDomainHostedZoneName ))]
  template_only:
    aws:
      access_key_id: (( cf_resources.blobstore.access_key ))
      secret_access_key: (( cf_resources.blobstore.secret_key ))
      availability_zone: (( cf_resources.subnets.[0].availability_zone ))
      availability_zone2: (( cf_resources.subnets.[1].availability_zone ))

  ccdb:
    db_scheme: mysql
    roles:
    - tag: admin
      name: (( cloud_formation_inputs.CCDBUsername ))
      password: (( cloud_formation_inputs.CCDBPassword ))
    databases:
    - tag: cc
      name: (( cf_databases.ccdb_database ))
    address: (( cf_databases.ccdb_host ))
    port: (( cf_databases.ccdb_port ))
  uaadb:
    db_scheme: mysql
    roles:
    - tag: admin
      name: (( cloud_formation_inputs.UAADBUsername ))
      password: (( cloud_formation_inputs.UAADBPassword ))
    databases:
    - tag: uaa
      name: (( cf_databases.uaadb_database ))
    address: (( cf_databases.uaadb_host ))
    port: (( cf_databases.uaadb_port ))

  uaa:
    jwt:
      signing_key: |
        (( merge ))
      verification_key: |
        (( merge ))
    cc:
      client_secret: (( merge ))
    admin:
      client_secret: (( merge ))
    batch:
      username: (( merge ))
      password: (( merge ))
    clients:
      login:
        secret: (( merge ))
      notifications:
        secret: (( merge ))
      doppler:
        secret: (( merge ))
      cloud_controller_username_lookup:
        secret: (( merge ))
      gorouter:
        secret: (( merge ))

    scim:
      users: (( merge ))

  nats:
    user: nats
    password: (( merge ))
    monitor_port: 9222

  cc:
    bulk_api_password: (( merge ))
    staging_upload_user: (( merge ))
    staging_upload_password: (( merge ))
    db_encryption_key: (( merge ))
    resource_pool: ~
    droplets: ~

  router:
    status:
      user: router
      password: (( merge ))
    route_service_secret: (( merge ))

  loggregator_endpoint:
    shared_secret: (( merge ))

  dea_next:
    disk_mb: 199000
    memory_mb: 28001

  collector:
    deployment_name: (( meta.environment ))

  acceptance_tests:
    api:  (( "api." domain ))
    apps_domain: (( app_domains ))
    system_domain: (( domain ))
    client_secret: (( uaa.clients.gorouter.secret ))
    admin_user: admin
    admin_password: (( merge ))
    nodes: 3
    include_sso: false
    include_services: false
    include_logging: false
    include_v3: false
    include_routing: false
    skip_ssl_validation: (( merge || false )) # REPLACE_WITH true if your ELB is using a self signed cert
    use_diego: false
    use_http: true

  smoke_tests:
    api:  (( "api." domain ))
    apps_domain: (( app_domains ))
    user: admin
    password: (( merge ))
    org: 'smoke-tests'
    space: 'smoke-tests'
    use_existing_org: true
    skip_ssl_validation: (( merge || false )) # REPLACE_WITH true if your ELB is using a self signed cert

  consul:
    encrypt_keys: (( merge ))
    require_ssl: true
    ca_cert: (( merge ))
    server_cert: (( merge ))
    server_key: (( merge ))
    agent_cert: (( merge ))
    agent_key: (( merge ))
