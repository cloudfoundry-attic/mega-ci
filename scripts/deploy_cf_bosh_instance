#!/bin/bash

deploy_buckets() {
  if ! aws cloudformation describe-stacks --stack-name cf-deployment-buckets; then
    aws cloudformation create-stack \
      --stack-name cf-deployment-buckets \
      --template-body file://$script_dir/../templates/cf-deployment/buckets.json \
      --parameters file://${deployment_dir}/cloud_formation/buckets-properties.json \
      --capabilities CAPABILITY_IAM
  else
    aws cloudformation update-stack \
      --stack-name cf-deployment-buckets \
      --template-body file://$script_dir/../templates/cf-deployment/buckets.json \
      --parameters file://${deployment_dir}/cloud_formation/buckets-properties.json \
      --capabilities CAPABILITY_IAM || true
  fi

  wait_for_deployment cf-deployment-buckets

  mkdir -p ${deployment_dir}/artifacts/iam-users

  aws cloudformation describe-stacks --stack-name cf-deployment-buckets \
      > ${deployment_dir}/artifacts/iam-users/etcd-buckets.json
}

deploy_bosh_and_cf() {
  # deploy infrastructure
  if ! aws cloudformation describe-stacks --stack-name cf-deployment ; then
    aws cloudformation create-stack \
      --stack-name cf-deployment \
      --template-body file://$script_dir/../templates/cf-deployment/cloudformation.json \
      --parameters file://${deployment_dir}/cloud_formation/properties.json
  else
    aws cloudformation update-stack \
      --stack-name cf-deployment \
      --template-body file://$script_dir/../templates/cf-deployment/cloudformation.json \
      --parameters file://${deployment_dir}/cloud_formation/properties.json || true # update-stack is not idempotent :(
  fi

  wait_for_deployment cf-deployment
}

wait_for_deployment() {
  DEPLOYMENT_NAME=$1

  start_time_in_s=$(date +%s)
  wait_time_in_s=$((30 * 60))
  deadline_in_s=$(($start_time_in_s + $wait_time_in_s))
  while aws cloudformation describe-stacks --stack-name $DEPLOYMENT_NAME | grep StackStatus | grep IN_PROGRESS ; do
    echo "CloudFormation stack 'cf-deployment' still in progress..."
    current_time_in_s=$(date +%s)
    remaining_time_in_s=$(($deadline_in_s - $current_time_in_s))

    if [ "$remaining_time_in_s" -gt 0 ]; then
      echo "   Waiting ${remaining_time_in_s} more seconds."
      sleep 15
    else
      echo "   Waited ${wait_time_in_s}, aborting."
      exit 1
    fi
  done
}

set -e -x

script_dir=$(dirname $0)

if [ $# -ne 2 ]; then
  echo 'Expected 2 arguments (path to deployment directory) (cf deployment name), received $#'
  exit 1
fi
deployment_dir=$1
cf_deployment_name=$2

command -v aws >/dev/null || { echo "aws is required"; exit 1; }
command -v bosh-init >/dev/null || { echo "bosh-init is required"; exit 1; }
command -v jq >/dev/null || { echo "jq is required"; exit 1; }
command -v spiff >/dev/null || { echo "spiff is required"; exit 1; }

set +x
  source $deployment_dir/aws_environment

  if [ -z ${AWS_DEFAULT_REGION} ]; then
    echo 'AWS_DEFAULT_REGION is not set'
    exit 1
  fi

  if [ -z ${AWS_ACCESS_KEY_ID} ]; then
    echo 'AWS_DEFAULT_REGION is not set'
    exit 1
  fi

  if [ -z ${AWS_SECRET_ACCESS_KEY} ]; then
    echo 'AWS_DEFAULT_REGION is not set'
    exit 1
  fi
set -x

mkdir -p ${deployment_dir}/artifacts/keypair
mkdir -p ${deployment_dir}/artifacts/deployments
mkdir -p ${deployment_dir}/generated-stubs/cf
mkdir -p generated-stubs/${cf_deployment_name}

# create keypair
if ! aws ec2 describe-key-pairs --key-names bosh; then
  aws ec2 create-key-pair --key-name bosh | jq -r .KeyMaterial > ${deployment_dir}/artifacts/keypair/id_rsa_bosh
fi

# install certs for CF ELB
if ! aws iam get-server-certificate --server-certificate-name cf; then
  aws iam upload-server-certificate --server-certificate-name cf --private-key file://${deployment_dir}/certs/cf.key --certificate-body file://${deployment_dir}/certs/cf.pem
fi

# deploy cloud formation templates
deploy_bosh_and_cf
deploy_buckets

if aws cloudformation describe-stacks --stack-name cf-deployment | grep StackStatus | grep ROLLBACK ; then
  echo 'Cloud formation failure'
  exit 1
fi

if ! aws cloudformation describe-stacks --stack-name cf-deployment | grep StackStatus | grep COMPLETE ; then
  echo 'Cloud formation failure'
  exit 1
fi

# generate AWS resources stub for shared purposes
aws cloudformation describe-stack-resources --stack-name cf-deployment \
  | jq '.StackResources|map({key: .LogicalResourceId, value: .PhysicalResourceId}) | from_entries as $body | {Resources: $body}' \
  > generated-stubs/${cf_deployment_name}/aws-resources.json

# generate stub for BOSH Security Group Name
BOSH_SECURITY_GROUP_ID=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.BOSHSecurityGroup)
BOSH_SECURITY_GROUP_NAME=$(aws ec2 describe-security-groups --group-ids ${BOSH_SECURITY_GROUP_ID} | jq -r .SecurityGroups[0].GroupName)

cat > generated-stubs/${cf_deployment_name}/security-groups.yml <<EOF
{
  "SecurityGroups": {
    "BOSH_SECURITY_GROUP_NAME": "$BOSH_SECURITY_GROUP_NAME"
  }
}
EOF

# generate stub for AWS Credentials
BOSH_SUBNET_ID=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.BOSHSubnet)
AWS_ZONE=$(aws ec2 describe-subnets --subnet-ids $BOSH_SUBNET_ID | jq -r .Subnets[0].AvailabilityZone)

cat > generated-stubs/${cf_deployment_name}/aws-credentials.yml <<EOF
{
  "AWSCredentials": {
    "AWS_ZONE": "$AWS_ZONE",
    "AWS_DEFAULT_REGION": "$AWS_DEFAULT_REGION",
    "AWS_ACCESS_KEY_ID": "$AWS_ACCESS_KEY_ID",
    "AWS_SECRET_ACCESS_KEY": "$AWS_SECRET_ACCESS_KEY"
  }
}
EOF

# generate CF Resources Stub
CF_Subnet_1=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.CFSubnetAZ1)
CF_AWS_ZONE_1=$(aws ec2 describe-subnets --subnet-ids $CF_Subnet_1 | jq -r .Subnets[0].AvailabilityZone)
CF_Subnet_2=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.CFSubnetAZ2)
CF_AWS_ZONE_2=$(aws ec2 describe-subnets --subnet-ids $CF_Subnet_2 | jq -r .Subnets[0].AvailabilityZone)
CF_ELB=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.CFLoadBalancer)
CF_SECURITY_GROUP_ID=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.CFSecurityGroup)
CF_SECURITY_GROUP_NAME=$(aws ec2 describe-security-groups --group-ids ${CF_SECURITY_GROUP_ID} | jq -r .SecurityGroups[0].GroupName)

cat > ${deployment_dir}/generated-stubs/cf/cf-resources.yml<<EOF
---
cf_resources:
  subnets:
    - subnet_id: $CF_Subnet_1
      availability_zone: $CF_AWS_ZONE_1
    - subnet_id: $CF_Subnet_2
      availability_zone: $CF_AWS_ZONE_2
  elb: $CF_ELB
  security_group_name: $CF_SECURITY_GROUP_NAME
EOF

cat ${deployment_dir}/cloud_formation/properties.json | \
  jq '.|map({key: .ParameterKey, value: .ParameterValue}) | from_entries as $body | {cloud_formation_inputs: $body}' \
  > ${deployment_dir}/generated-stubs/cf/cf-cloud-formation-inputs.json

# generate CF database stub
CCDB=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.CCDB)
UAADB=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.UAADB)
CCDB_INFO=$(aws rds describe-db-instances --db-instance-identifier ccdb)
CCDB_HOST=$(echo $CCDB_INFO | jq -r '.DBInstances[0].Endpoint.Address')
CCDB_PORT=$(echo $CCDB_INFO | jq -r '.DBInstances[0].Endpoint.Port')

UAADB_INFO=$(aws rds describe-db-instances --db-instance-identifier uaadb)
UAADB_HOST=$(echo $UAADB_INFO | jq -r '.DBInstances[0].Endpoint.Address')
UAADB_PORT=$(echo $UAADB_INFO | jq -r '.DBInstances[0].Endpoint.Port')

cat > ${deployment_dir}/generated-stubs/cf/cf-databases.yml<<EOF
---
cf_databases:
  ccdb_database: $CCDB
  ccdb_host: $CCDB_HOST
  ccdb_port: $CCDB_PORT
  uaadb_database: $UAADB
  uaadb_host: $UAADB_HOST
  uaadb_port: $UAADB_PORT
EOF

# generate BOSH deployment manifest
echo "# GENERATED: NO TOUCHING" > ${deployment_dir}/artifacts/deployments/bosh.yml
spiff merge $script_dir/../templates/cf-deployment/bosh-init.yml \
  $script_dir/../templates/cf-deployment/bosh.yml \
  generated-stubs/${cf_deployment_name}/aws-credentials.yml \
  generated-stubs/${cf_deployment_name}/aws-resources.json \
  generated-stubs/${cf_deployment_name}/security-groups.yml \
  ${deployment_dir}/stubs/bosh/bosh_passwords.yml \
  >> ${deployment_dir}/artifacts/deployments/bosh.yml

# deploy BOSH
bosh-init deploy ${deployment_dir}/artifacts/deployments/bosh.yml

# display result
BOSH_IP=$(cat generated-stubs/${cf_deployment_name}/aws-resources.json | jq -r .Resources.MicroEIP)
echo "BOSH director is at $BOSH_IP"

# generate director uuid stub for cf
BOSH_DIRECTOR_UUID=$(bosh status --uuid)
cat > ${deployment_dir}/generated-stubs/cf/director-uuid.yml <<EOF
---
director_uuid: $BOSH_DIRECTOR_UUID
EOF

# clean up
rm -rf generated-stubs
