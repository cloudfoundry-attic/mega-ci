#!/bin/bash -exu

function validate_arguments() {
  if [ $# -ne 3 ]; then
    echo "Expected 3 argument (release_name path_to_aws_credentials_dir path_to_config_dir) received $#"
    exit 1
  fi
}

function check_dependencies() {
  command -v aws >/dev/null || { echo "aws is required"; exit 1; }
  command -v jq >/dev/null || { echo "jq is required"; exit 1; }
}

function load_credentials() {
  set +x
    source "${credentials_dir}/aws_environment"

    if [[ -z "${AWS_DEFAULT_REGION}" ]]; then
      echo "AWS_DEFAULT_REGION is not set"
      exit 1
    fi

    if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
      echo "AWS_DEFAULT_REGION is not set"
      exit 1
    fi

    if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]; then
      echo "AWS_DEFAULT_REGION is not set"
      exit 1
    fi

  set -x
}

function apply_cloudformation_template() {
  local release_name
  release_name="${1}"

  local script_dir
  script_dir="${2}"

  if aws cloudformation describe-stacks --stack-name "${release_name}-buckets" > /dev/null; then
    apply_stack_operation update "${release_name}" "${script_dir}" || true
  else
    apply_stack_operation create "${release_name}" "${script_dir}"
  fi

  wait_on_cloudformation "${release_name}"
  check_final_cloudformation_state "${release_name}"
}

function apply_stack_operation() {
  local operation
  operation="${1}"

  local release_name
  release_name="${2}"

  local script_dir
  script_dir="${3}"

  aws cloudformation "${operation}-stack" \
    --stack-name "${release_name}-buckets" \
    --parameters "ParameterKey=BucketName,ParameterValue=${release_name}-release-blobs" \
    --template-body "file://${script_dir}/../templates/final-release/bucket.json" \
    --capabilities CAPABILITY_IAM > /dev/null
}

function cloudformation_stack_status() {
  local release_name
  release_name="${1}"

  local status
  status="$(aws cloudformation describe-stacks --stack-name "${release_name}-buckets" | jq -r .Stacks[].StackStatus)"

  printf "%s" "${status}"
}

function wait_on_cloudformation() {
  local release_name
  release_name="${1}"

  local half_an_hour
  half_an_hour="$((30 * 60))"

  local deadline_in_seconds
  deadline_in_seconds=$(($(date +%s) + ${half_an_hour}))

  while cloudformation_stack_status "${release_name}" | grep IN_PROGRESS ; do
    echo "CloudFormation stack '${release_name}-buckets' still in progress..."

    local remaining_time_in_seconds
    remaining_time_in_seconds="$((deadline_in_seconds - $(date +%s)))"

    if [ "${remaining_time_in_seconds}" -gt 0 ]; then
      echo "   Waiting ${remaining_time_in_seconds} more seconds."
      sleep 15
    else
      echo "   Waited ${half_an_hour} seconds, aborting."
      exit 1
    fi
  done
}

function check_final_cloudformation_state() {
  local release_name
  release_name="${1}"

  local status
  status="$(cloudformation_stack_status "${release_name}")"

  if echo "${status}" | grep ROLLBACK ; then
    echo "CloudFormation failed to apply template: ${status}"
    exit 1
  fi

  if ! echo "${status}" | grep COMPLETE ; then
    echo "CloudFormation failed to apply template: ${status}"
    exit 1
  fi
}

function write_private_yaml() {
  local release_name
  release_name="${1}"

  local credentials_dir
  credentials_dir="${2}"

  local release_config_dir
  release_config_dir="${3}"

  local bucket_output
  bucket_output="${credentials_dir}/bucket.json"

  aws cloudformation describe-stacks --stack-name "${release_name}-buckets" > "${bucket_output}"

  local access_key_id
  local secret_access_key

  set +x
  access_key_id="$(jq -e -r ".Stacks[0].Outputs[0].OutputValue" "${bucket_output}")"
  secret_access_key="$(jq -e -r ".Stacks[0].Outputs[1].OutputValue" "${bucket_output}")"
  set -x

  cat > "${release_config_dir}/private.yml" <<EOF
---
blobstore:
  s3:
    access_key_id: ${access_key_id}
    secret_access_key: ${secret_access_key}
EOF

  rm "${bucket_output}"
}

function main() {
  local script_dir
  script_dir="$(cd "$(dirname "$0")" && pwd)"

  validate_arguments "${@}"

  local release_name
  release_name="${1}"

  local credentials_dir
  credentials_dir="${2}"

  local release_config_dir
  release_config_dir="${3}"

  check_dependencies
  load_credentials "${credentials_dir}"
  apply_cloudformation_template "${release_name}" "${script_dir}"
  write_private_yaml "${release_name}" "${credentials_dir}" "${release_config_dir}"
}

main "${@}"
