#/bin/bash
set -e
command -v certstrap >/dev/null || { echo "certstrap is required"; exit 1; }
command -v base64 >/dev/null || { echo "base64 is required"; exit 1; }

function generate_consul_certs()
{
  local _depot_path=$(mktemp -d || mktemp -d -t depot)
  # CA to distribute to consul agent and servers
  certstrap --depot-path ${_depot_path} init --passphrase '' --common-name consulCA 1>&2
  mv -f ${_depot_path}/consulCA.crt ${_depot_path}/server-ca.crt
  mv -f ${_depot_path}/consulCA.key ${_depot_path}/server-ca.key

  # Server certificate to share across the consul cluster
  server_cn=server.dc1.cf.internal
  certstrap --depot-path ${_depot_path} request-cert --passphrase '' --common-name $server_cn 1>&2
  certstrap --depot-path ${_depot_path} sign $server_cn --CA server-ca 1>&2
  mv -f ${_depot_path}/$server_cn.key ${_depot_path}/server.key
  mv -f ${_depot_path}/$server_cn.csr ${_depot_path}/server.csr
  mv -f ${_depot_path}/$server_cn.crt ${_depot_path}/server.crt

  # Agent certificate to distribute to jobs that access consul
  certstrap --depot-path ${_depot_path} request-cert --passphrase '' --common-name 'consul agent' 1>&2
  certstrap --depot-path ${_depot_path} sign consul_agent --CA server-ca 1>&2
  mv -f ${_depot_path}/consul_agent.key ${_depot_path}/agent.key
  mv -f ${_depot_path}/consul_agent.csr ${_depot_path}/agent.csr
  mv -f ${_depot_path}/consul_agent.crt ${_depot_path}/agent.crt

  echo $_depot_path
}

depot_path=$(generate_consul_certs)

dir=$(dirname $0)
generate_random_string="$dir/generate_random_string"
generate_json_web_token_keys="$dir/generate_json_web_token_keys"

cloud_controller_admin_password=$($generate_random_string)
keys=$($generate_json_web_token_keys)

signing_key=$(echo "$keys" | head -n 27)
verification_key=$(echo "$keys" | tail -n 9)

function format_consul_key()
{
  sed 's/^/      /' "$1"
}

function format_jwt_key()
{
  echo "$1" | sed 's/^/        /'
}

signing_key=$(format_jwt_key "$signing_key")
verification_key=$(format_jwt_key "$verification_key")

consul_encrypt_key=$(dd if=/dev/urandom bs=16 count=1| base64)
consul_ca_crt=$(format_consul_key "$depot_path/server-ca.crt")
consul_server_crt=$(format_consul_key "$depot_path/server.crt")
consul_server_key=$(format_consul_key "$depot_path/server.key")
consul_agent_crt=$(format_consul_key "$depot_path/agent.crt")
consul_agent_key=$(format_consul_key "$depot_path/agent.key")

cat << EOM
properties:
  acceptance_tests:
    admin_password: ${cloud_controller_admin_password}
  cc:
    staging_upload_user: $($generate_random_string)
    bulk_api_password: $($generate_random_string)
    staging_upload_password: $($generate_random_string)
    db_encryption_key: $($generate_random_string)
  consul:
    encrypt_keys: [$consul_encrypt_key]
    require_ssl: true
    ca_cert: |
$consul_ca_crt
    server_cert: |
$consul_server_crt
    server_key: |
$consul_server_key
    agent_cert: |
$consul_agent_crt
    agent_key: |
$consul_agent_key
  loggregator_endpoint:
    shared_secret: $($generate_random_string)
  nats:
    password: $($generate_random_string)
  router:
    status:
      password: $($generate_random_string)
    route_service_secret: $($generate_random_string)
  smoke_tests:
    password: ${cloud_controller_admin_password}
  uaa:
    admin:
      client_secret: $($generate_random_string)
    batch:
      username: $($generate_random_string)
      password: $($generate_random_string)
    cc:
      client_secret: $($generate_random_string)
    clients:
      cloud_controller_username_lookup:
        secret: $($generate_random_string)
      doppler:
        secret: $($generate_random_string)
      gorouter:
        secret: $($generate_random_string)
      login:
        secret: $($generate_random_string)
      notifications:
        secret: $($generate_random_string)
    jwt:
      signing_key: |
$signing_key
      verification_key: |
$verification_key
    scim:
      users: 
      - "admin|${cloud_controller_admin_password}|scim.write,scim.read,openid,cloud_controller.admin,doppler.firehose"
EOM

rm -Rf $depot_path
