#!/bin/bash

set -e -x

script_dir=$(dirname $0)

if [ $# -ne 1 ]; then
  echo "Expected 1 argument (path to deployment directory), received $#"
  exit 1
fi

#remove trailing slash
deployment_dir=${1%/}

command -v aws >/dev/null || { echo "aws is required"; exit 1; }
command -v bosh-init >/dev/null || { echo "bosh-init is required"; exit 1; }
command -v jq >/dev/null || { echo "jq is required"; exit 1; }
command -v spiff >/dev/null || { echo "spiff is required"; exit 1; }
command -v openssl >/dev/null || { echo "openssl is required"; exit 1; }

set +x
  source $deployment_dir/aws_environment

  if [ -z ${AWS_DEFAULT_REGION} ]; then
    echo 'AWS_DEFAULT_REGION is not set'
    exit 1
  fi

  if [ -z ${AWS_ACCESS_KEY_ID} ]; then
    echo 'AWS_DEFAULT_REGION is not set'
    exit 1
  fi

  if [ -z ${AWS_SECRET_ACCESS_KEY} ]; then
    echo 'AWS_DEFAULT_REGION is not set'
    exit 1
  fi
set -x

mkdir -p ${deployment_dir}/artifacts/certs
mkdir -p ${deployment_dir}/artifacts/keypair
mkdir -p ${deployment_dir}/artifacts/deployments
mkdir -p ${deployment_dir}/generated-stubs/pipeline
mkdir -p ${deployment_dir}/stubs/bosh
mkdir -p generated-stubs

for script_source in ${script_dir}/common/*; do source ${script_source}; done

# create bosh ssl certificate
if [ ! -e ${deployment_dir}/artifacts/certs/rootCA.key ]; then
  openssl genrsa -out ${deployment_dir}/artifacts/certs/rootCA.key 2048
fi

if [ ! -e ${deployment_dir}/artifacts/certs/rootCA.pem ]; then
  yes "" | openssl req -x509 -new -nodes -key ${deployment_dir}/artifacts/certs/rootCA.key -out ${deployment_dir}/artifacts/certs/rootCA.pem -days 99999
fi

# create keypair
if ! aws ec2 describe-key-pairs --key-names bosh; then
  aws ec2 create-key-pair --key-name bosh | jq -r .KeyMaterial > ${deployment_dir}/artifacts/keypair/id_rsa_bosh
fi

# install certs for CF ELB
if [ -e ${deployment_dir}/artifacts/certs/cf.key ] && ! aws iam get-server-certificate --server-certificate-name cf; then
  aws iam upload-server-certificate --server-certificate-name cf --private-key file://${deployment_dir}/artifacts/certs/cf.key --certificate-body file://${deployment_dir}/artifacts/certs/cf.pem
fi

# install certs for Concourse ELB
set +e
CONCOURSE_HOSTNAME=$(cat ${deployment_dir}/cloud_formation/properties.json | \
  jq -r '.|map({key: .ParameterKey, value: .ParameterValue}) | from_entries as $body | $body | .ELBRecordSetName' | grep -v "^null$" | grep -o ".*[^.]")
set -e

if ! aws iam get-server-certificate --server-certificate-name concourse; then
  if [ -e ${deployment_dir}/artifacts/certs/concourse_chain.pem ]; then
    aws iam upload-server-certificate --server-certificate-name concourse --private-key file://${deployment_dir}/artifacts/certs/concourse.key --certificate-body file://${deployment_dir}/artifacts/certs/concourse.pem  --certificate-chain file://${deployment_dir}/artifacts/certs/concourse_chain.pem
  elif [ -e ${deployment_dir}/artifacts/certs/concourse.pem ]; then
    aws iam upload-server-certificate --server-certificate-name concourse --private-key file://${deployment_dir}/artifacts/certs/concourse.key --certificate-body file://${deployment_dir}/artifacts/certs/concourse.pem
  elif [ -n ${CONCOURSE_HOSTNAME} ]; then
    generate_certificate "${deployment_dir}/artifacts/certs" "concourse" ${CONCOURSE_HOSTNAME}
    aws iam upload-server-certificate --server-certificate-name concourse --private-key file://${deployment_dir}/artifacts/certs/concourse.key --certificate-body file://${deployment_dir}/artifacts/certs/concourse.pem
  fi
fi

# deploy infrastructure
if ! aws cloudformation describe-stacks --stack-name concourse ; then
  if [ -e ${deployment_dir}/cloud_formation/properties.json ]; then
    aws cloudformation create-stack \
      --stack-name concourse \
      --template-body file://$script_dir/../templates/infrastructure/cloudformation.json \
      --parameters file://${deployment_dir}/cloud_formation/properties.json
  else
    aws cloudformation create-stack \
      --stack-name concourse \
      --template-body file://$script_dir/../templates/infrastructure/cloudformation.json
  fi
else
  if [ -e ${deployment_dir}/cloud_formation/properties.json ]; then
    aws cloudformation update-stack \
      --stack-name concourse \
      --template-body file://$script_dir/../templates/infrastructure/cloudformation.json \
      --parameters file://${deployment_dir}/cloud_formation/properties.json || true # update-stack is not idempotent :(
  else
    aws cloudformation update-stack \
          --stack-name concourse \
          --template-body file://$script_dir/../templates/infrastructure/cloudformation.json || true # update-stack is not idempotent :(
  fi
fi

while aws cloudformation describe-stacks --stack-name concourse | grep StackStatus | grep IN_PROGRESS ; do
  echo "CloudFormation stack 'concourse' still in progress..."
  sleep 15
done

if aws cloudformation describe-stacks --stack-name concourse | grep StackStatus | grep ROLLBACK ; then
  echo 'Cloud formation failure'
  exit 1
fi

if ! aws cloudformation describe-stacks --stack-name concourse | grep StackStatus | grep COMPLETE ; then
  echo 'Cloud formation failure'
  exit 1
fi

# generate AWS resources stub for shared purposes
aws cloudformation describe-stack-resources --stack-name concourse \
  | jq '.StackResources|map({key: .LogicalResourceId, value: .PhysicalResourceId}) | from_entries as $body | {Resources: $body}' \
  > generated-stubs/aws-resources.json

BOSH_IP=$(cat generated-stubs/aws-resources.json | jq -r .Resources.MicroEIP)
# generate certificate for bosh director
if [ ! -e ${deployment_dir}/artifacts/certs/bosh.crt ]; then
  cat >generated-stubs/openssl-exts.conf <<-EOL
extensions = san
[san]
subjectAltName = IP:${BOSH_IP}
EOL

  openssl req -new -nodes -newkey rsa:2048 \
    -out generated-stubs/bosh.csr -keyout ${deployment_dir}/artifacts/certs/bosh.key \
    -subj "/C=US/O=BOSH/CN=${BOSH_IP}"

  openssl x509 -req -in generated-stubs/bosh.csr \
    -CA ${deployment_dir}/artifacts/certs/rootCA.pem -CAkey ${deployment_dir}/artifacts/certs/rootCA.key -CAcreateserial \
    -out ${deployment_dir}/artifacts/certs/bosh.crt -days 99999 \
    -extfile generated-stubs/openssl-exts.conf
fi

cat > generated-stubs/bosh-certs.json <<EOF
{
  "bosh_certs": {
    "key": `cat ${deployment_dir}/artifacts/certs/bosh.key | jq -R -s .`,
    "crt": `cat ${deployment_dir}/artifacts/certs/bosh.crt | jq -R -s .`
  }
}
EOF

# generate stub for BOSH Security Group Name
BOSH_SECURITY_GROUP_ID=$(cat generated-stubs/aws-resources.json | jq -r .Resources.BOSHSecurityGroup)
BOSH_SECURITY_GROUP_NAME=$(aws ec2 describe-security-groups --group-ids ${BOSH_SECURITY_GROUP_ID} | jq -r .SecurityGroups[0].GroupName)

cat > generated-stubs/security-groups.yml <<EOF
{
  "SecurityGroups": {
    "BOSH_SECURITY_GROUP_NAME": "$BOSH_SECURITY_GROUP_NAME"
  }
}
EOF

# generate stub for AWS Credentials
BOSH_SUBNET_ID=$(cat generated-stubs/aws-resources.json | jq -r .Resources.BOSHSubnet)
AWS_ZONE=$(aws ec2 describe-subnets --subnet-ids $BOSH_SUBNET_ID | jq -r .Subnets[0].AvailabilityZone)

cat > generated-stubs/aws-credentials.yml <<EOF
{
  "AWSCredentials": {
    "AWS_ZONE": "$AWS_ZONE",
    "AWS_DEFAULT_REGION": "$AWS_DEFAULT_REGION",
    "AWS_ACCESS_KEY_ID": "$AWS_ACCESS_KEY_ID",
    "AWS_SECRET_ACCESS_KEY": "$AWS_SECRET_ACCESS_KEY"
  }
}
EOF

# generate CF Resources Stub
CF_Subnet=$(cat generated-stubs/aws-resources.json | jq -r .Resources.CFSubnet)
CF_AWS_ZONE=$(aws ec2 describe-subnets --subnet-ids $CF_Subnet | jq -r .Subnets[0].AvailabilityZone)
CF_ELB=$(cat generated-stubs/aws-resources.json | jq -r .Resources.CFLoadBalancer)
CF_SECURITY_GROUP_ID=$(cat generated-stubs/aws-resources.json | jq -r .Resources.CFSecurityGroup)
CF_SECURITY_GROUP_NAME=$(aws ec2 describe-security-groups --group-ids ${CF_SECURITY_GROUP_ID} | jq -r .SecurityGroups[0].GroupName)

cat > ${deployment_dir}/generated-stubs/pipeline/cf-resources.yml<<EOF
---
cf_resources:
  availability_zone: $CF_AWS_ZONE
  elb: $CF_ELB
  security_group_name: $CF_SECURITY_GROUP_NAME
  subnet_id: $CF_Subnet
EOF

# generate BOSH passwords if they do not exist
if [ ! -e ${deployment_dir}/stubs/bosh/bosh_passwords.yml ]; then
  generate_bosh_passwords ${deployment_dir}/stubs/bosh/bosh_passwords.yml
fi

# generate BOSH deployment manifest
echo "# GENERATED: NO TOUCHING" > ${deployment_dir}/artifacts/deployments/bosh.yml
spiff merge $script_dir/../templates/bosh/bosh-init.yml \
  $script_dir/../templates/infrastructure/bosh.yml \
  generated-stubs/aws-credentials.yml \
  generated-stubs/aws-resources.json \
  generated-stubs/bosh-certs.json \
  generated-stubs/security-groups.yml \
  ${deployment_dir}/stubs/bosh/bosh_passwords.yml \
  >> ${deployment_dir}/artifacts/deployments/bosh.yml

# deploy BOSH
bosh-init deploy ${deployment_dir}/artifacts/deployments/bosh.yml

# display result
echo "BOSH director is at $BOSH_IP"

# generate director uuid stub for cf
BOSH_DIRECTOR_UUID=$(bosh -t ${BOSH_IP} status --uuid)
cat > ${deployment_dir}/generated-stubs/pipeline/bosh-director-uuid.yml <<EOF
---
director_uuid: $BOSH_DIRECTOR_UUID
EOF

# clean up
rm -rf generated-stubs

