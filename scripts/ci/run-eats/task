#!/bin/bash -exu

export ROOT="${PWD}"
export GOPATH="$PWD/etcd-release"
export GO15VENDOREXPERIMENT=1
export ETCD_RELEASE_VERSION="$(ls compiled-etcd-release/*.tgz | sed 's/compiled-etcd-release\/release-etcd-\(.*\)-on-ubuntu.*/\1/')"

function main() {
  upload_releases
  write_configuration
  install_bosh_cli
  unset_boshv1

  pushd etcd-release > /dev/null
    EATS_CONFIG=$PWD/../eats_config.json ./src/acceptance-tests/scripts/test -nodes "${PARALLEL_NODES}" --skipPackage=turbulence
  popd > /dev/null
}

function install_bosh_cli() {
  pushd "${ROOT}" > /dev/null
    wget https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-0.0.147-linux-amd64
    mv bosh-cli-0.0.147-linux-amd64 /usr/local/bin/bosh
    chmod +x /usr/local/bin/bosh
  popd > /dev/null
}

function unset_boshv1() {
  unset BOSH_USER
  unset BOSH_PASSWORD
}

function set_boshv1() {
  export BOSH_USER="$BOSH_CLIENT"
  export BOSH_PASSWORD="$BOSH_CLIENT_SECRET"
}

function write_configuration() {
  cat > eats_config.json <<EOF
  {
    "bosh": {
      "target": "$BOSH_ENVIRONMENT",
      "username": "$BOSH_CLIENT",
      "password": "$BOSH_CLIENT_SECRET",
      "director_ca_cert": "$(set +x; rollup "${BOSH_CA_CERT}")"
    },
    "aws": {
      "subnet": "$AWS_SUBNET",
      "access_key_id": "$AWS_ACCESS_KEY_ID",
      "secret_access_key": "$AWS_SECRET_ACCESS_KEY",
      "default_key_name": "$AWS_DEFAULT_KEY_NAME",
      "default_security_groups": ["$AWS_DEFAULT_SECURITY_GROUPS"],
      "region": "$AWS_REGION"
    }
  }
EOF
}


function upload_releases() {
  pushd "${ROOT}/compiled-etcd-release" > /dev/null
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_ENVIRONMENT}" -n upload release release-*.tgz
  popd > /dev/null

  pushd "${ROOT}/consul-release" > /dev/null
    /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_ENVIRONMENT}" upload release release-*.tgz --skip-if-exists
  popd > /dev/null
}

function cleanup_releases() {
  set_boshv1
  /opt/rubies/ruby-2.2.4/bin/bosh -t "${BOSH_ENVIRONMENT}" -n cleanup
}

function rollup() {
  set +x
  local input
  input="${1}"

  local output

  IFS=$'\n'
  for line in ${input}; do
    output="${output:-""}\n${line}"
  done

  printf "%s" "${output#'\n'}"
  set -x
}

trap cleanup_releases EXIT
main
