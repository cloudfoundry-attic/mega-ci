#!/bin/bash -exu

ROOT="${PWD}"

preflight_check() {
  set +x
  test -n "${BOSH_ENVIRONMENT}"
  test -n "${BOSH_CLIENT}"
  test -n "${BOSH_CLIENT_SECRET}"
  test -n "${BOSH_CA_CERT}"
  set -x
}

function install_bosh_cli() {
  pushd "${ROOT}" > /dev/null
    wget https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-0.0.147-linux-amd64
    mv bosh-cli-0.0.147-linux-amd64 /usr/local/bin/boshv2
    chmod +x /usr/local/bin/boshv2
  popd > /dev/null
}

deploy() {
  boshv2 \
    -n \
    -d etcd-cf-deployment \
    interpolate "${@}" > final-cf.yml


  set +x
  export BOSH_USER=$BOSH_CLIENT
  export BOSH_PASSWORD=$BOSH_CLIENT_SECRET
  set -x

  /opt/rubies/ruby-2.2.4/bin/bosh -n -t ${BOSH_ENVIRONMENT} -d final-cf.yml deploy
}

generate_releases_stub() {
  local build_dir
  build_dir="${1}"

  cat <<EOF
---
releases:
- name: cf
  version: create
  url: file://${build_dir}/cf-release
- name: etcd
  version: create
  url: file://${build_dir}/etcd-release
EOF
}

generate_stemcell_stub() {
  cat <<EOF
---
meta:
  stemcell:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent
    version: latest
EOF
}

generate_job_templates_stub() {
  cat <<EOF
meta:
  <<: (( merge ))
  etcd_templates:
  - name: etcd
    release: etcd
  - name: etcd_metrics_server
    release: etcd
jobs:
  - name: router_z1
    instances: 2
  - name: postgres_z1
    templates:
    - name: postgres
      release: cf
  - name: consul_z1
    templates:
    - name: consul_agent
      consumes: { consul: nil }
      release: cf
  - name: consul_z2
    templates:
    - name: consul_agent
      consumes: { consul: nil }
      release: cf
EOF
}

upload_stemcell() {
  pushd "${ROOT}/stemcell" > /dev/null
    boshv2 upload-stemcell stemcell.tgz
  popd > /dev/null
}

main() {
  local root_dir
  root_dir=$PWD

  preflight_check

  mkdir stubs

  install_bosh_cli
  upload_stemcell

  pushd stubs > /dev/null
    generate_releases_stub ${root_dir} > releases.yml
    generate_stemcell_stub > stemcells.yml
    generate_job_templates_stub > job_templates.yml
  popd > /dev/null

  "${root_dir}/cf-release/scripts/generate_deployment_manifest" \
    "aws" \
    "${root_dir}/stubs/releases.yml" \
    "${root_dir}/stubs/stemcells.yml" \
    "${root_dir}/stubs/job_templates.yml" \
    "${root_dir}/etcd-cf-env/stubs/director-uuid.yml" \
    "${root_dir}/etcd-cf-env/stubs/cf/diego.yml" \
    "${root_dir}/etcd-cf-env/stubs/cf/properties.yml" \
    "${root_dir}/etcd-cf-env/stubs/cf/stub.yml" \
     > "${root_dir}/cf.yml"

  deploy \
    "${root_dir}/cf.yml" \
    -o "${root_dir}/etcd-cf-env/stubs/cf/non_tls_ops_file.yml"
}

if [ "$(basename "${0}")" = "task" ]; then
  main
fi
